AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for CloudComputing project

Parameters:
  AllFilesBacketName:
    Type: String
    Default: cloud-every-file
  UsersTableName:
    Type: String
    Default: CloudUsers
  FilesTableName:
    Type: String
    Default: CloudFiles
  InvitationsTableName:
    Type: String
    Default: CloudInvitations
  UsersUserPoolName:
    Type: String
    Default: CloudUsers
  UsersUserPoolClientName:
    Type: String
    Default: cloudusersacc
  UsersUserPoolDomainName:
    Type: String
    Default: cloud-users-ftn
  BerzaZnanjaEmailSES:
    Type: String
    Default: arn:aws:ses:eu-central-1:335701030429:identity/berzaznanjars@gmail.com

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Runtime: python3.8
    Architectures:
      - x86_64
    Environment:
      Variables:
        FILES_BUCKET: !Ref AllFilesBacketName
        USERS_TABLE: !Ref UsersTableName
        FILES_TABLE: !Ref FilesTableName
        INVITATIONS_TABLE: !Ref InvitationsTableName
        MAIN_ALBUM_NAME: !Ref "Main Album"


Resources:
  ApiGatewayApi:
      Type: AWS::Serverless::HttpApi
      Properties:
        StageName: Prod
        CorsConfiguration:
          AllowMethods:
            - '*'
          AllowOrigins:
            - '*'
          AllowHeaders:
            - '*'
        Auth:
          Authorizers:
            UsersCognitoAuthorizer:
              IdentitySource: "$request.header.Authorization"
              JwtConfiguration:
                issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UsersCognitoUserPool}
                audience:
                  - !Ref UsersCognitoUserPoolClient
  UsersCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UsersUserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: True
          RequireUppercase: True
          RequireNumbers: True
          RequireSymbols: False
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Mutable: True
          Required: True
        - AttributeDataType: String
          Name: preferred_username
          Mutable: True
          Required: True
        - AttributeDataType: String
          Name: name
          Mutable: True
          Required: True
        - AttributeDataType: String
          Name: surname
          Mutable: True
          Required: False
        - AttributeDataType: String
          Name: birthday
          Mutable: True
          Required: False
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
        EmailSubjectByLink: 'Lightning Cloud verification link'
        EmailMessageByLink: 'Welcome to Lightning Cloud. Verify your email by clicking the link: {##Verify Email##}'
      MfaConfiguration: 'OFF'
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: 'verified_email'
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: False
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        From: Berza Znanja <berzaznanjars@gmail.com>
        SourceArn: !Ref BerzaZnanjaEmailSES
  UsersCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UsersCognitoUserPool
      ClientName: !Ref UsersUserPoolClientName
      GenerateSecret: False
  UsersUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref UsersUserPoolDomainName
      UserPoolId: !Ref UsersCognitoUserPool
  UsersDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Ref UsersTableName
      AttributeDefinitions: 
        - AttributeName: username
          AttributeType: S
      KeySchema: 
        - AttributeName: username
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  FilesDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Ref FilesTableName
      AttributeDefinitions: 
        - AttributeName: fileName
          AttributeType: S
        - AttributeName: owner
          AttributeType: S
      KeySchema: 
        - AttributeName: fileName
          KeyType: HASH
        - AttributeName: owner
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  InvitationsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Ref InvitationsTableName
      AttributeDefinitions: 
        - AttributeName: id
          AttributeType: S
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  FilesAllBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref AllFilesBacketName
  PostSignupLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: registration/
      Handler: app.registration_lambda
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        PostConfirmation:
          Type: Cognito
          Properties:
            UserPool: !Ref UsersCognitoUserPool
            Trigger: PostConfirmation
  ChangeAvatarFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: change_avatar/
      Handler: app.change_avatar_lambda
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        ApiGateway:
          Type: HttpApi
          Properties:
            Path: /api/changeAvatar/{username}
            Method: put
            ApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: UsersCognitoAuthorizer
  UploadFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: upload_file/
      Handler: app.upload_file_lambda
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonS3FullAccess
        - AmazonDynamoDBFullAccess
      Events:
        ApiGateway:
          Type: HttpApi
          Properties:
            Path: /api/upload
            Method: post
            ApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: UsersCognitoAuthorizer
  GetUserDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user_details/
      Handler: app.user_details
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonCognitoReadOnly
        - AmazonDynamoDBReadOnlyAccess
      Events:
        ApiGateway:
          Type: HttpApi
          Properties:
            Path: /api/user
            Method: get
            ApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: UsersCognitoAuthorizer
  NewAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: new_album/
      Handler: app.new_album
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonCognitoReadOnly
        - AmazonDynamoDBFullAccess
      Events:
        ApiGateway:
          Type: HttpApi
          Properties:
            Path: /api/newAlbum
            Method: post
            ApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: UsersCognitoAuthorizer
  MoveFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: move_file/
      Handler: app.move_file
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonCognitoReadOnly
        - AmazonDynamoDBFullAccess
      Events:
        ApiGateway:
          Type: HttpApi
          Properties:
            Path: /api/move
            Method: put
            ApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: UsersCognitoAuthorizer
  UpdateFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_file/
      Handler: app.update_file
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        ApiGateway:
          Type: HttpApi
          Properties:
            Path: /api/update_file
            Method: put
            ApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: UsersCognitoAuthorizer
  DeleteFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete_file/
      Handler: app.delete_file
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
        - AmazonS3FullAccess
      Events:
        ApiGateway:
          Type: HttpApi
          Properties:
            Path: /api/delete_file
            Method: delete
            ApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: UsersCognitoAuthorizer